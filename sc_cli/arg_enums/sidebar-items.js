window.SIDEBAR_ITEMS = {"constant":[["DEFAULT_EXECUTION_BLOCK_CONSTRUCTION","Default value for the `--execution-block-construction` parameter."],["DEFAULT_EXECUTION_IMPORT_BLOCK","Default value for the `--execution-import-block` parameter."],["DEFAULT_EXECUTION_IMPORT_BLOCK_VALIDATOR","Default value for the `--execution-import-block` parameter when the node is a validator."],["DEFAULT_EXECUTION_OFFCHAIN_WORKER","Default value for the `--execution-offchain-worker` parameter."],["DEFAULT_EXECUTION_OTHER","Default value for the `--execution-other` parameter."],["DEFAULT_EXECUTION_SYNCING","Default value for the `--execution-syncing` parameter."],["DEFAULT_WASMTIME_INSTANTIATION_STRATEGY","The default [`WasmtimeInstantiationStrategy`]."],["DEFAULT_WASM_EXECUTION_METHOD","The default [`WasmExecutionMethod`]."]],"enum":[["CryptoScheme","The crypto scheme to use."],["Database","Database backend"],["ExecutionStrategy","How to execute blocks"],["NodeKeyType","The type of the node key."],["OffchainWorkerEnabled","Whether off-chain workers are enabled."],["OutputType","The type of the output format."],["RpcMethods","Available RPC methods."],["SyncMode","Syncing mode."],["TracingReceiver",""],["WasmExecutionMethod","How to execute Wasm runtime code."],["WasmtimeInstantiationStrategy","The instantiation strategy to use in compiled mode."]],"fn":[["execution_method_from_cli","Converts the execution method and instantiation strategy command line arguments into an execution method which can be used internally."]]};