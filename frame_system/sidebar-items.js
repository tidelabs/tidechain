window.SIDEBAR_ITEMS = {"enum":[["DecRefStatus","Some resultant status relevant to decrementing a provider/self-sufficient reference."],["IncRefStatus","Some resultant status relevant to incrementing a provider/self-sufficient reference."],["Phase","A phase of a blockâ€™s execution."],["RawOrigin","Origin for the System pallet."],["RefStatus","Reference status; can be either referenced or unreferenced."]],"fn":[["ensure_none","Ensure that the origin `o` represents an unsigned extrinsic. Returns `Ok` or an `Err` otherwise."],["ensure_root","Ensure that the origin `o` represents the root. Returns `Ok` or an `Err` otherwise."],["ensure_signed","Ensure that the origin `o` represents a signed extrinsic (i.e. transaction). Returns `Ok` with the account that signed the extrinsic or an `Err` otherwise."],["ensure_signed_or_root","Ensure that the origin `o` represents either a signed extrinsic (i.e. transaction) or the root. Returns `Ok` with the account that signed the extrinsic, `None` if it was root,  or an `Err` otherwise."],["extrinsics_data_root","Compute the trie root of a list of extrinsics."],["extrinsics_root","Compute the trie root of a list of extrinsics."],["split_inner","Split an `option` into two constituent options, as defined by a `splitter` function."]],"mod":[["limits","Block resource limits configuration structures."],["migrations","Migrate the reference counting state."],["mocking","Provide types to help defining a mock environment when testing pallets."],["offchain","Module helpers for off-chain calls."],["pallet","The module that hosts all the FRAME types needed to add this pallet to a runtime."],["pallet_prelude","Prelude to be used alongside pallet macro, for ease of use."],["weights","Autogenerated weights for frame_system"]],"struct":[["AccountInfo","Information of an account."],["ChainContext",""],["CheckEra","Check for transaction mortality."],["CheckGenesis","Genesis hash check to provide replay protection between different networks."],["CheckMortality","Check for transaction mortality."],["CheckNonZeroSender","Check to ensure that the sender is not the zero address."],["CheckNonce","Nonce check and increment to give replay protection for transactions."],["CheckSpecVersion","Ensure the runtime version registered in the transaction is the same as at present."],["CheckTxVersion","Ensure the transaction version registered in the transaction is the same as at present."],["CheckWeight","Block resource (weight) limit check."],["Consumer","Event handler which registers a consumer when created."],["EnsureNever","Always fail."],["EnsureNone","Ensure the origin is `None`. i.e. unsigned transaction."],["EnsureRoot","Ensure the origin is Root."],["EnsureRootWithSuccess","Ensure the origin is Root and return the provided `Success` value."],["EnsureSigned","Ensure the origin is any `Signed` origin."],["EnsureSignedBy","Ensure the origin is `Signed` origin from the given `AccountId`."],["EnsureWithSuccess","Ensure the origin is provided `Ensure` origin and return the provided `Success` value."],["EventRecord","Record of an event happening."],["LastRuntimeUpgradeInfo","Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."],["Provider","Event handler which registers a provider when created."],["SelfSufficient","Event handler which registers a self-sufficient when created."]],"trait":[["ConsumerLimits","Numeric limits over the ability to add a consumer ref using `inc_consumers`."],["SetCode","Do something when we should be setting the code."]],"type":[["ConsumedWeight","An object to track the currently used extrinsic weight in a block."],["Key",""],["KeyValue",""],["RefCount","Type used to encode the number of references an account has."]]};