window.SIDEBAR_ITEMS = {"constant":[["EXIT_FAILURE","`EXIT_FAILURE` for use with `exit`."],["EXIT_SIGNALED_SIGABRT","The exit status used by a process terminated with `SIGABRT` signal."],["EXIT_SUCCESS","`EXIT_SUCCESS` for use with `exit`."]],"enum":[["DumpableBehavior","`SUID_DUMP_*`."],["EndianMode","`PR_ENDIAN_*`."],["FloatingPointMode","`PR_FP_MODE_*`."],["MachineCheckMemoryCorruptionKillPolicy","`PR_MCE_KILL_*`."],["MembarrierCommand","A command for use with `membarrier` and `membarrier_cpu`."],["PTracer","Process ptracer."],["Resource","A resource value for use with `getrlimit`, `setrlimit`, and `prlimit`."],["Signal","A signal number for use with `kill_process`, `kill_process_group`, and `kill_current_process_group`."],["SpeculationFeature","`PR_SPEC_*`."],["TimeStampCounterReadability","`PR_TSC_*`."],["TimingMethod","`PR_TIMING_*`."],["VirtualMemoryMapAddress","`PR_SET_MM_*`."]],"fn":[["chdir","`chdir(path)`—Change the current working directory."],["child_subreaper","Get the `child subreaper` setting of the calling process."],["configure_io_flusher_behavior","Put the process in the `IO_FLUSHER` state, allowing it to make progress when allocating memory."],["configure_performance_counters","Enable or disable all performance counters attached to the calling process."],["configure_pointer_authentication_keys","Set enabled pointer authentication keys."],["configure_virtual_memory_map","Provides one-shot access to all the addresses by passing in a [`PrctlMmMap`]."],["control_speculative_feature","Sets the state of the speculation misfeature."],["dumpable_behavior","Get the current state of the calling process’s `dumpable` attribute."],["enabled_pointer_authentication_keys","Get enabled pointer authentication keys."],["endian_mode","Get the endianness of the calling process."],["fchdir","`fchdir(fd)`—Change the current working directory."],["floating_point_emulation_control","Get floating point emulation control bits."],["floating_point_exception_mode","Get floating point exception mode."],["floating_point_mode","Get the current floating point mode."],["getcwd","`getcwd()`—Return the current working directory."],["getegid","`getegid()`—Returns the process’ effective group ID."],["geteuid","`geteuid()`—Returns the process’ effective user ID."],["getgid","`getgid()`—Returns the process’ real group ID."],["getpgid","`getpgid(pid)`—Returns the process group ID of the given process."],["getpgrp","`getpgrp()`—Returns the process’ group ID."],["getpid","`getpid()`—Returns the process’ ID."],["getppid","`getppid()`—Returns the parent process’ ID."],["getpriority_pgrp","`getpriority(PRIO_PGRP, gid)`—Get the scheduling priority of the given process group."],["getpriority_process","`getpriority(PRIO_PROCESS, pid)`—Get the scheduling priority of the given process."],["getpriority_user","`getpriority(PRIO_USER, uid)`—Get the scheduling priority of the given user."],["getrlimit","`getrlimit(resource)`—Get a process resource limit value."],["getuid","`getuid()`—Returns the process’ real user ID."],["is_io_flusher","Get the `IO_FLUSHER` state of the caller."],["kill_current_process_group","`kill(0, sig)`—Sends a signal to all processes in the current process group."],["kill_process","`kill(pid, sig)`—Sends a signal to a process."],["kill_process_group","`kill(-pid, sig)`—Sends a signal to all processes in a process group."],["machine_check_memory_corruption_kill_policy","Get the current per-process machine check kill policy."],["membarrier","`membarrier(cmd, 0, 0)`—Perform a memory barrier."],["membarrier_cpu","`membarrier(cmd, MEMBARRIER_CMD_FLAG_CPU, cpu)`—Perform a memory barrier with a specific CPU."],["membarrier_query","`membarrier(MEMBARRIER_CMD_QUERY, 0, 0)`—Query the supported `membarrier` commands."],["nice","`nice()`—Adjust the scheduling priority of the current process."],["parent_process_death_signal","Get the current value of the parent process death signal."],["prlimit","`prlimit(pid, resource, new)`—Get and set a process resource limit value."],["sched_getaffinity","`sched_getaffinity(pid)`—Get a thread’s CPU affinity mask."],["sched_setaffinity","`sched_setaffinity(pid, cpuset)`—Set a thread’s CPU affinity mask."],["sched_yield","`sched_yield()`—Hints to the OS that other processes should run."],["set_auxiliary_vector","Set a new auxiliary vector."],["set_child_subreaper","Set the `child subreaper` attribute of the calling process."],["set_dumpable_behavior","Set the state of the `dumpable` attribute, which determines whether the process can be traced and whether core dumps are produced for the calling process upon delivery of a signal whose default behavior is to produce a core dump."],["set_endian_mode","Set the endianness of the calling process."],["set_executable_file","Supersede the `/proc/pid/exe` symbolic link with a new one pointing to a new executable file."],["set_floating_point_emulation_control","Set floating point emulation control bits."],["set_floating_point_exception_mode","Set floating point exception mode."],["set_floating_point_mode","Allow control of the floating point mode from user space."],["set_machine_check_memory_corruption_kill_policy","Set the machine check memory corruption kill policy for the calling thread."],["set_parent_process_death_signal","Set the parent-death signal of the calling process."],["set_ptracer","Declare that the ptracer process can `ptrace` the calling process as if it were a direct process ancestor."],["set_time_stamp_counter_readability","Set the state of the flag determining if the timestamp counter can be read by the process."],["set_timing_method","Set whether to use (normal, traditional) statistical process timing or accurate timestamp-based process timing."],["set_unaligned_access_control","Set unaligned access control bits."],["set_virtual_memory_map_address","Modify certain kernel memory map descriptor addresses of the calling process."],["set_virtual_memory_region_name","Set the name for a virtual memory region."],["setpriority_pgrp","`setpriority(PRIO_PGRP, pgid)`—Get the scheduling priority of the given process group."],["setpriority_process","`setpriority(PRIO_PROCESS, pid)`—Get the scheduling priority of the given process."],["setpriority_user","`setpriority(PRIO_USER, uid)`—Get the scheduling priority of the given user."],["setrlimit","`setrlimit(resource, new)`—Set a process resource limit value."],["setsid","`setsid()`—Create a new session."],["speculative_feature_state","Get the state of the speculation misfeature."],["time_stamp_counter_readability","Get the state of the flag determining if the timestamp counter can be read."],["timing_method","Get which process timing method is currently in use."],["unaligned_access_control","Get unaligned access control bits."],["uname","`uname()`—Returns high-level information about the runtime OS and hardware."],["virtual_memory_map_config_struct_size","Get the size of the [`PrctlMmMap`] the kernel expects."],["wait","`wait(waitopts)`—Wait for any of the children of calling process to change state."],["waitpid","`waitpid(pid, waitopts)`—Wait for a specific process to change state."]],"struct":[["CpuSet","`CpuSet` represents a bit-mask of CPUs."],["Cpuid","A Linux CPU ID."],["FloatingPointEmulationControl","`PR_FPEMU_*`."],["FloatingPointExceptionMode","Zero means floating point exceptions are disabled."],["Gid","`gid_t`—A Unix group ID."],["MembarrierQuery","A result from [`membarrier_query`]."],["Pid","`pid_t`—A non-zero Unix process ID."],["PointerAuthenticationKeys","`PR_PAC_AP*`."],["PrctlMmMap","This structure provides new memory descriptor map which mostly modifies `/proc/pid/stat[m]` output for a task. This mostly done in a sake of checkpoint/restore functionality."],["Rlimit","`struct rlimit`—Current and maximum values used in [`getrlimit`], [`setrlimit`], and [`prlimit`]."],["SpeculationFeatureControl","`PR_SPEC_*`."],["SpeculationFeatureState","Zero means the processors are not vulnerable."],["Uid","`uid_t`—A Unix user ID."],["UnalignedAccessControl","`PR_UNALIGN_*`."],["Uname","`struct utsname`—Return type for [`uname`]."],["WaitOptions","Options for modifying the behavior of wait/waitpid"],["WaitStatus","the status of the child processes the caller waited on"]],"type":[["RawGid","The raw integer value of a Unix group ID. A group identifier as a raw integer."],["RawNonZeroPid","The raw integer value of a Unix process ID. A non-zero process identifier as a raw non-zero integer."],["RawPid","The raw integer value of a Unix process ID. A process identifier as a raw integer."],["RawUid","The raw integer value of a Unix user ID. A user identifier as a raw integer."]]};