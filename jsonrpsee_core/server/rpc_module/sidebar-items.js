window.SIDEBAR_ITEMS = {"enum":[["InnerSubscriptionResult","Outcome of a successful terminated subscription."],["MethodKind","Callback wrapper that can be either sync or async."],["MethodResult","Result of a method, either direct value or a future of one."]],"struct":[["ConnState","Helper struct to manage subscriptions."],["MethodCallback","Method callback wrapper that contains a sync or async closure, plus a table with resources it needs to claim to run"],["MethodResourcesBuilder","Builder for configuring resources used by a method."],["Methods","Reference-counted, clone-on-write collection of synchronous and asynchronous methods."],["RpcModule","Sets of JSON-RPC methods can be organized into a “module“s that are in turn registered on the server or, alternatively, merged with other modules to construct a cohesive API. [`RpcModule`] wraps an additional context argument that can be used to access data during call execution."],["Subscription","Wrapper struct that maintains a subscription “mainly” for testing."],["SubscriptionSink","Represents a single subscription."]],"type":[["AsyncMethod","Similar to [`SyncMethod`], but represents an asynchronous handler and takes an additional argument containing a [`ResourceGuard`] if configured."],["ConnectionId","Connection ID, used for stateful protocol such as WebSockets. For stateless protocols such as http it’s unused, so feel free to set it some hardcoded value."],["MaxResponseSize","Max response size."],["RawRpcResponse","Raw response from an RPC A 3-tuple containing:"],["SubscriptionMethod","Method callback for subscriptions."],["SyncMethod","A `MethodCallback` is an RPC endpoint, callable with a standard JSON-RPC request, implemented as a function pointer to a `Fn` function taking four arguments: the `id`, `params`, a channel the function uses to communicate the result (or error) back to `jsonrpsee`, and the connection ID (useful for the websocket transport)."]]};