window.SIDEBAR_ITEMS = {"macro":[["if_std","Feature gate some code that should only be run when `std` feature is enabled."],["map","Initialize a key-value collection from array."],["vec","Creates a `Vec` containing the arguments."]],"mod":[["alloc","Memory allocation APIs."],["any","Utilities for dynamic typing or type reflection."],["borrow","A module for working with borrowed data."],["boxed","The `Box<T>` type for heap allocation."],["cell","Shareable mutable containers."],["clone","The `Clone` trait for types that cannot be ‘implicitly copied’."],["cmp","Utilities for comparing and ordering values."],["collections",""],["convert","Traits for conversions between types."],["default","The `Default` trait for types with a default value."],["fmt","Utilities for formatting and printing `String`s."],["hash","Generic hashing support."],["iter","Composable external iteration."],["marker","Primitive traits and types representing basic properties of types."],["mem","Basic functions for dealing with memory."],["num","Additional functionality for numerics."],["ops","Overloadable operators."],["prelude","Prelude of common useful imports."],["ptr","Manually manage memory through raw pointers."],["rc","Single-threaded reference-counting pointers. ‘Rc’ stands for ‘Reference Counted’."],["result","Error handling with the `Result` type."],["slice","Utilities for the slice primitive type."],["str","Utilities for the `str` primitive type."],["sync","Useful synchronization primitives."],["thread",""],["time","Temporal quantification."],["vec","A contiguous growable array type with heap-allocated contents, written `Vec<T>`."]],"struct":[["Writer","A target for `core::write!` macro - constructs a string in memory."]]};