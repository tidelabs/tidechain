#![cfg_attr(not(feature = "std"), no_std)]

#[cfg(test)]
mod mock;

#[cfg(test)]
mod tests;

#[cfg(feature = "runtime-benchmarks")]
mod benchmarking;

#[frame_support::pallet]
pub mod pallet {

  use frame_support::{
    inherent::Vec,
    pallet_prelude::*,
  };
  use frame_system::pallet_prelude::*;
  use sp_runtime::{
    SaturatedConversion,
  };

  /// Request id generated by the contract
  type RequestId = u32;

  /// Token id
  type TokenId = u32;

  /// Timestamp
  type Timestamp = u64;

  #[derive(Encode, Decode, Clone, RuntimeDebug)]
  enum RequestType {
    Mint,
    Burn,
  }

  #[derive(Encode, Decode, Clone, PartialEq, RuntimeDebug)]
  enum RequestStatus {
    Pending,
    Cancelled,
    Approved,
    Rejected,
  }

  #[derive(Encode, Decode, Clone, RuntimeDebug)]
  pub struct Request<T: Config> {
    kind: RequestType,
    token: TokenId,
    requester: T::AccountId,
    amount: T::Balance,
    deposit_address: Vec<u8>,
    txid: Vec<u8>,
    timestamp: Timestamp,
    status: RequestStatus,
  }

  #[pallet::config]
  /// Configure the pallet by specifying the parameters and types on which it depends.
  pub trait Config: frame_system::Config + pallet_balances::Config + pallet_sudo::Config {
    type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
    type WeightInfo;
  }

  #[pallet::pallet]
  #[pallet::generate_store(pub (super) trait Store)]
  pub struct Pallet<T>(_);

  /// Quorum is enabled
  #[pallet::storage]
  #[pallet::getter(fn is_quorum_enabled)]
  pub(super) type QuorumStatus<T: Config> = StorageValue<_, bool, ValueQuery>;

  /// Highest token
  #[pallet::storage]
  #[pallet::getter(fn highest_token)]
  pub(super) type HighestToken<T: Config> = StorageValue<_, T::Balance, ValueQuery>;

  /// Requests
  #[pallet::storage]
  #[pallet::getter(fn locked_holders)]
  pub(super) type Requests<T: Config> =
    StorageMap<_, Blake2_128Concat, RequestId, Request<T>, OptionQuery>;

  #[pallet::genesis_config]
  pub struct GenesisConfig<T: Config> {
    pub quorum_enabled: bool,
    pub highest_token: T::Balance,
  }

  #[cfg(feature = "std")]
  impl<T: Config> Default for GenesisConfig<T> {
    fn default() -> Self {
      Self {
        quorum_enabled: true,
        highest_token: 0u128.saturating_mul(1_000_000_000_000_u128).saturated_into(),
      }
    }
  }

  #[pallet::genesis_build]
  impl<T: Config> GenesisBuild<T> for GenesisConfig<T> {
    fn build(&self) {
      QuorumStatus::<T>::put(self.quorum_enabled);
      HighestToken::<T>::put(self.highest_token.saturated_into::<T::Balance>());
    }
  }

  #[pallet::event]
  #[pallet::generate_deposit(pub (super) fn deposit_event)]
  pub enum Event<T: Config> {
    QuorumPaused,
    NativeTideMintedAndLocked(T::AccountId, T::AccountId, T::Balance),
    TokenBurn(T::AccountId, TokenId, T::Balance),
    TokenMint(T::AccountId, TokenId, T::Balance),
  }

  // Errors inform users that something went wrong.
  #[pallet::error]
  pub enum Error<T> {
    /// The Quorum is paused. Try again later.
    QuorumPaused,
    /// The quorum can't confirm the request because the ID do not exist.
    InvalidRequest,
  }

  // Dispatchable functions allows users to interact with the pallet and invoke state changes.
  // These functions materialize as "extrinsics", which are often compared to transactions.
  // Dispatchable functions must be annotated with a weight and must return a DispatchResult.
  #[pallet::call]
  impl<T: Config> Pallet<T> {
    // Change quorum status
    #[pallet::weight(10000)]
    pub fn set_quorum_status(
      origin: OriginFor<T>,
      quorum_enabled: bool,
    ) -> DispatchResultWithPostInfo {
      // make sure it's the quprum
      ensure_root(origin)?;
      // update quorum
      QuorumStatus::<T>::put(quorum_enabled);
      // no payment required
      Ok(Pays::No.into())
    }

    #[pallet::weight(10000)]
    pub fn burn_request(_origin: OriginFor<T>) -> DispatchResultWithPostInfo {
      // TODO decide which pallet we use for the balances?
      Ok(Pays::No.into())
    }

    // Confirm request (Quorum only)
    #[pallet::weight(10000)]
    pub fn confirm_request(
      origin: OriginFor<T>,
      request_id: RequestId,
    ) -> DispatchResultWithPostInfo {
      // make sure it's the quorum
      ensure_root(origin)?;
      // make sure it's not paused
      Self::ensure_not_paused()?;

      Requests::<T>::mutate(request_id, |request| match request {
        Some(request) => {
          // not pending?
          if request.status != RequestStatus::Pending {
            return Err(Error::<T>::InvalidRequest.into())
          }

          match request.kind {
            RequestType::Mint => {
              // FIXME: Do minting
              Self::deposit_event(Event::TokenMint(
                request.requester.clone(),
                request.token,
                request.amount,
              ));
            }
            RequestType::Burn => {
              // FIXME: Do burning
              Self::deposit_event(Event::TokenBurn(
                request.requester.clone(),
                request.token,
                request.amount,
              ));
            }
          }

          // do not pay fees
          Ok(Pays::No.into())
        }
        // request not found
        None => Err(Error::<T>::InvalidRequest.into()),
      })
    }
  }

  // helper functions (not dispatchable)
  impl<T: Config> Pallet<T> {
    fn ensure_not_paused() -> Result<(), DispatchError> {
      if Self::is_quorum_enabled() {
        Ok(())
      } else {
        Err(Error::<T>::QuorumPaused.into())
      }
    }
  }
}
