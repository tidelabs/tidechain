// Copyright 2021-2022 Semantic Network Ltd.
// This file is part of Tidechain.

// Tidechain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Tidechain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Tidechain.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_tidefi`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-05, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ns3206536`, CPU: `Intel(R) Xeon(R) D-2141I CPU @ 2.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("tidechain-dev"), DB CACHE: 1024

// Executed Command:
// target/production/tidechain
// benchmark
// pallet
// --chain=tidechain-dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./FILE_TEMPLATE
// --output=./runtime/tidechain/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_tidefi`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_tidefi::WeightInfo for WeightInfo<T> {
	/// Storage: Security ChainStatus (r:1 w:0)
	/// Proof: Security ChainStatus (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: Quorum QuorumStatus (r:1 w:0)
	/// Proof: Quorum QuorumStatus (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: Assets Asset (r:1 w:0)
	/// Proof: Assets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:1 w:0)
	/// Proof: Assets Account (max_values: Some(300000), max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Security Nonce (r:1 w:1)
	/// Proof: Security Nonce (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: System ParentHash (r:1 w:0)
	/// Proof: System ParentHash (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Security CurrentBlockCount (r:1 w:0)
	/// Proof: Security CurrentBlockCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Quorum Proposals (r:1 w:1)
	/// Proof: Quorum Proposals (max_values: Some(1), max_size: Some(365002), added: 365497, mode: MaxEncodedLen)
	fn withdrawal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `888`
		//  Estimated: `373320`
		// Minimum execution time: 52_430 nanoseconds.
		Weight::from_parts(55_072_000, 373320)
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Security ChainStatus (r:1 w:0)
	/// Proof: Security ChainStatus (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: Oracle OracleStatus (r:1 w:0)
	/// Proof: Oracle OracleStatus (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: Assets Asset (r:1 w:0)
	/// Proof: Assets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: System ExtrinsicData (r:1 w:0)
	/// Proof Skipped: System ExtrinsicData (max_values: None, max_size: None, mode: Measured)
	/// Storage: Oracle MarketMakers (r:1 w:0)
	/// Proof: Oracle MarketMakers (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Security Nonce (r:1 w:1)
	/// Proof: Security Nonce (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: System ParentHash (r:1 w:0)
	/// Proof: System ParentHash (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Oracle AccountSwaps (r:1 w:1)
	/// Proof: Oracle AccountSwaps (max_values: None, max_size: Some(330050), added: 332525, mode: MaxEncodedLen)
	/// Storage: Oracle CounterForAccountSwaps (r:1 w:1)
	/// Proof: Oracle CounterForAccountSwaps (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Oracle Swaps (r:0 w:1)
	/// Proof: Oracle Swaps (max_values: None, max_size: Some(197), added: 2672, mode: MaxEncodedLen)
	fn swap() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `653`
		//  Estimated: `343407`
		// Minimum execution time: 65_673 nanoseconds.
		Weight::from_parts(70_767_000, 343407)
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_022 nanoseconds.
		Weight::from_ref_time(10_669_000)
	}
	/// Storage: Fees ActiveEra (r:1 w:0)
	/// Proof: Fees ActiveEra (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Security CurrentBlockCount (r:1 w:0)
	/// Proof: Security CurrentBlockCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Sunrise Rewards (r:1 w:1)
	/// Proof: Sunrise Rewards (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim_sunrise_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `683`
		//  Estimated: `6188`
		// Minimum execution time: 68_648 nanoseconds.
		Weight::from_parts(73_262_000, 6188)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
