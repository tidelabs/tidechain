// Copyright 2021-2022 Semantic Network Ltd.
// This file is part of Tidechain.

// Tidechain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Tidechain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Tidechain.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_quorum`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-05, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ns3206536`, CPU: `Intel(R) Xeon(R) D-2141I CPU @ 2.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("tidechain-dev"), DB CACHE: 1024

// Executed Command:
// target/production/tidechain
// benchmark
// pallet
// --chain=tidechain-dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./FILE_TEMPLATE
// --output=./runtime/tidechain/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_quorum`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_quorum::WeightInfo for WeightInfo<T> {
	/// Storage: Quorum PublicKeys (r:2 w:0)
	/// Proof: Quorum PublicKeys (max_values: None, max_size: Some(2911), added: 5386, mode: MaxEncodedLen)
	/// Storage: Quorum Members (r:1 w:0)
	/// Proof: Quorum Members (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Security CurrentBlockCount (r:1 w:0)
	/// Proof: Security CurrentBlockCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Security Nonce (r:1 w:1)
	/// Proof: Security Nonce (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: System ParentHash (r:1 w:0)
	/// Proof: System ParentHash (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Quorum Proposals (r:1 w:1)
	/// Proof: Quorum Proposals (max_values: Some(1), max_size: Some(365002), added: 365497, mode: MaxEncodedLen)
	fn submit_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `398`
		//  Estimated: `380346`
		// Minimum execution time: 49_140 nanoseconds.
		Weight::from_parts(49_821_000, 380346)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Quorum PublicKeys (r:2 w:0)
	/// Proof: Quorum PublicKeys (max_values: None, max_size: Some(2911), added: 5386, mode: MaxEncodedLen)
	/// Storage: Quorum Members (r:1 w:0)
	/// Proof: Quorum Members (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Security CurrentBlockCount (r:1 w:0)
	/// Proof: Security CurrentBlockCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Quorum Proposals (r:1 w:1)
	/// Proof: Quorum Proposals (max_values: Some(1), max_size: Some(365002), added: 365497, mode: MaxEncodedLen)
	/// Storage: Quorum Votes (r:1 w:1)
	/// Proof: Quorum Votes (max_values: None, max_size: Some(695), added: 3170, mode: MaxEncodedLen)
	/// Storage: Quorum Threshold (r:1 w:0)
	/// Proof: Quorum Threshold (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	/// Storage: Quorum CounterForMembers (r:1 w:0)
	/// Proof: Quorum CounterForMembers (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn acknowledge_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `543`
		//  Estimated: `383458`
		// Minimum execution time: 101_394 nanoseconds.
		Weight::from_parts(105_949_000, 383458)
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Quorum PublicKeys (r:2 w:0)
	/// Proof: Quorum PublicKeys (max_values: None, max_size: Some(2911), added: 5386, mode: MaxEncodedLen)
	/// Storage: Quorum Members (r:1 w:0)
	/// Proof: Quorum Members (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Quorum BurnedQueue (r:1 w:1)
	/// Proof: Quorum BurnedQueue (max_values: Some(1), max_size: Some(346002), added: 346497, mode: MaxEncodedLen)
	fn acknowledge_burned() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `513`
		//  Estimated: `359793`
		// Minimum execution time: 38_122 nanoseconds.
		Weight::from_parts(40_497_000, 359793)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Quorum PublicKeys (r:2 w:0)
	/// Proof: Quorum PublicKeys (max_values: None, max_size: Some(2911), added: 5386, mode: MaxEncodedLen)
	/// Storage: Quorum Members (r:1 w:0)
	/// Proof: Quorum Members (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Security CurrentBlockCount (r:1 w:0)
	/// Proof: Security CurrentBlockCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Quorum Proposals (r:1 w:1)
	/// Proof: Quorum Proposals (max_values: Some(1), max_size: Some(365002), added: 365497, mode: MaxEncodedLen)
	/// Storage: Quorum Votes (r:1 w:1)
	/// Proof: Quorum Votes (max_values: None, max_size: Some(695), added: 3170, mode: MaxEncodedLen)
	/// Storage: Quorum Threshold (r:1 w:0)
	/// Proof: Quorum Threshold (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	/// Storage: Quorum CounterForMembers (r:1 w:0)
	/// Proof: Quorum CounterForMembers (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn reject_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `543`
		//  Estimated: `383458`
		// Minimum execution time: 59_556 nanoseconds.
		Weight::from_parts(64_315_000, 383458)
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Quorum Votes (r:1 w:1)
	/// Proof: Quorum Votes (max_values: None, max_size: Some(695), added: 3170, mode: MaxEncodedLen)
	/// Storage: Security CurrentBlockCount (r:1 w:0)
	/// Proof: Security CurrentBlockCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Quorum Threshold (r:1 w:0)
	/// Proof: Quorum Threshold (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	/// Storage: Quorum CounterForMembers (r:1 w:0)
	/// Proof: Quorum CounterForMembers (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn eval_proposal_state() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `392`
		//  Estimated: `4665`
		// Minimum execution time: 23_756 nanoseconds.
		Weight::from_parts(25_706_000, 4665)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Quorum Members (r:1 w:0)
	/// Proof: Quorum Members (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Quorum PublicKeys (r:101 w:100)
	/// Proof: Quorum PublicKeys (max_values: None, max_size: Some(2911), added: 5386, mode: MaxEncodedLen)
	/// The range of component `k` is `[0, 100]`.
	fn submit_public_keys(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `331`
		//  Estimated: `8325 + k * (5380 Â±1)`
		// Minimum execution time: 29_989 nanoseconds.
		Weight::from_parts(35_509_579, 8325)
			// Standard Error: 12_462
			.saturating_add(Weight::from_ref_time(3_192_204).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_proof_size(5380).saturating_mul(k.into()))
	}
}
