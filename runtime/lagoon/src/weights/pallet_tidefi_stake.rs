// Copyright 2021-2022 Semantic Network Ltd.
// This file is part of Tidechain.

// Tidechain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Tidechain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Tidechain.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_tidefi_stake`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-05, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ns3206536`, CPU: `Intel(R) Xeon(R) D-2141I CPU @ 2.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("lagoon-dev"), DB CACHE: 1024

// Executed Command:
// target/production/tidechain
// benchmark
// pallet
// --chain=lagoon-dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./FILE_TEMPLATE
// --output=./runtime/lagoon/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_tidefi_stake`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_tidefi_stake::WeightInfo for WeightInfo<T> {
	/// Storage: TidefiStaking StakingPeriodRewards (r:1 w:0)
	/// Proof: TidefiStaking StakingPeriodRewards (max_values: Some(1), max_size: Some(51), added: 546, mode: MaxEncodedLen)
	/// Storage: TidefiStaking StakingCurrencyMeta (r:1 w:0)
	/// Proof: TidefiStaking StakingCurrencyMeta (max_values: None, max_size: Some(53), added: 2528, mode: MaxEncodedLen)
	/// Storage: Security Nonce (r:1 w:1)
	/// Proof: Security Nonce (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: System ParentHash (r:1 w:0)
	/// Proof: System ParentHash (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: Assets Asset (r:1 w:1)
	/// Proof: Assets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:2 w:2)
	/// Proof: Assets Account (max_values: Some(300000), max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: TidefiStaking StakingPool (r:1 w:1)
	/// Proof: TidefiStaking StakingPool (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: Security CurrentBlockCount (r:1 w:0)
	/// Proof: Security CurrentBlockCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: TidefiStaking AccountStakes (r:1 w:1)
	/// Proof: TidefiStaking AccountStakes (max_values: None, max_size: Some(949), added: 3424, mode: MaxEncodedLen)
	/// Storage: TidefiStaking InterestCompoundLastSession (r:1 w:0)
	/// Proof: TidefiStaking InterestCompoundLastSession (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: TidefiStaking CounterForAccountStakes (r:1 w:1)
	/// Proof: TidefiStaking CounterForAccountStakes (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1438`
		//  Estimated: `22039`
		// Minimum execution time: 104_909 nanoseconds.
		Weight::from_parts(118_318_000, 22039)
			.saturating_add(T::DbWeight::get().reads(13))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: TidefiStaking AccountStakes (r:1 w:1)
	/// Proof: TidefiStaking AccountStakes (max_values: None, max_size: Some(949), added: 3424, mode: MaxEncodedLen)
	/// Storage: Security CurrentBlockCount (r:1 w:0)
	/// Proof: Security CurrentBlockCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: TidefiStaking UnstakeFee (r:1 w:0)
	/// Proof: TidefiStaking UnstakeFee (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: Assets Asset (r:1 w:1)
	/// Proof: Assets Asset (max_values: None, max_size: Some(210), added: 2685, mode: MaxEncodedLen)
	/// Storage: Assets Account (r:2 w:2)
	/// Proof: Assets Account (max_values: Some(300000), max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: TidefiStaking UnstakeQueue (r:1 w:1)
	/// Proof: TidefiStaking UnstakeQueue (max_values: Some(1), max_size: Some(6802), added: 7297, mode: MaxEncodedLen)
	fn unstake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1633`
		//  Estimated: `19587`
		// Minimum execution time: 88_855 nanoseconds.
		Weight::from_parts(89_403_000, 19587)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(5))
	}
}
