# .gitlab-ci.yml
#
# tidechain
#
# pipelines can be triggered manually in the web
# setting DEPLOY_TAG will only deploy the tagged image
#
# please do not add new jobs without "rules:" and "*-env". There are &rules-test for everything
# and "kubernetes-env" with "docker-env" to set a runner which executes the job.

stages:
  - test
  - build
  - publish
  - deploy

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

variables:
  GIT_STRATEGY: fetch
  GIT_DEPTH: 100
  CI_SERVER_NAME: "GitLab CI"
  CI_IMAGE: "paritytech/ci-linux:production"
  DOCKER_OS: "debian:stretch"
  ARCH: "x86_64"
  VAULT_SERVER_URL: "https://vault.semantic-network.tech"
  VAULT_AUTH_PATH: "gitlab-semnet-io-jwt"
  VAULT_AUTH_ROLE: "cicd_gitlab_semnet_${CI_PROJECT_NAME}"

default:
  cache: {}

# FIXME: To be removed
.docker_auth:
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.collect-artifacts: &collect-artifacts
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when: on_success
    expire_in: 28 days
    paths:
      - ./artifacts/

.kubernetes-env: &kubernetes-env
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure
  interruptible: true
  tags:
    - dv-Kubernetes

.docker-env: &docker-env
  image: "${CI_IMAGE}"
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure
  interruptible: true
  tags:
    - dv-Docker

.compiler-info: &compiler-info
  before_script:
    - rustup show
    - cargo --version
    - sccache -s

.rules-test: &rules-test # these jobs run always*
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_REF_NAME == "main"
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/ # PRs (Github issues)
    - if: "$CI_COMMIT_BRANCH =~ /^feat/" # Features
    - if: "$CI_COMMIT_BRANCH =~ /^chore/" # Chore
    - if: "$CI_COMMIT_BRANCH =~ /^fix/" # Fix

#### Vault secrets
.vault-secrets: &vault-secrets
  secrets:
    DOCKER_HUB_USER:
      vault: cicd/gitlab/semnet/DOCKER_HUB_USER@kv
      file: false
    DOCKER_HUB_PASS:
      vault: cicd/gitlab/semnet/DOCKER_HUB_PASS@kv
      file: false
    GITHUB_USER:
      vault: cicd/gitlab/$CI_PROJECT_PATH/GITHUB_USER@kv
      file: false
    GITHUB_SSH_PRIV_KEY:
      vault: cicd/gitlab/$CI_PROJECT_PATH/GITHUB_SSH_PRIV_KEY@kv
      file: false
    SEMNETPR_USER:
      vault: cicd/gitlab/$CI_PROJECT_PATH/SEMNETPR_USER@kv
      file: false
    SEMNETPR_PASS:
      vault: cicd/gitlab/$CI_PROJECT_PATH/SEMNETPR_PASS@kv
      file: false
    SSH_PRIVATE_KEY:
      vault: cicd/gitlab/$CI_PROJECT_PATH/SSH_PRIVATE_KEY@kv
      file: false

check-runtime:
  stage: test
  image: paritytech/tools:latest
  <<: *kubernetes-env
  <<: *rules-test
  <<: *vault-secrets
  variables:
    GITLAB_API: "https://gitlab.parity.io/api/v4"
    GITHUB_API_PROJECT: "parity%2Finfrastructure%2Fgithub-api"
  script:
    - ./scripts/gitlab/check_runtime.sh
  allow_failure: true

cargo-fmt:
  stage: test
  <<: *docker-env
  <<: *rules-test
  script:
    - cargo +nightly --version
    - cargo +nightly fmt --all -- --check
  allow_failure: true

test-deterministic-wasm:
  stage: test
  <<: *rules-test
  <<: *docker-env
  <<: *compiler-info
  <<: *vault-secrets
  script:
    - ./scripts/gitlab/test_deterministic_wasm.sh

test-build-linux-stable:
  stage: test
  <<: *docker-env
  <<: *compiler-info
  <<: *collect-artifacts
  <<: *vault-secrets
  variables:
    RUST_TOOLCHAIN: stable
    # Enable debug assertions since we are running optimized builds for testing
    # but still want to have debug assertions.
    RUSTFLAGS: "-Cdebug-assertions=y -Dwarnings"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_REF_NAME == "main"
    - if: $CI_COMMIT_REF_NAME =~ /^v[0-9]+\.[0-9]+.*$/ # i.e. v1.0, v2.1rc1
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/ # PRs
  script:
    - ./scripts/gitlab/test_linux_stable.sh
    # we're using the bin built here, instead of having a parallel `build-linux-release`
    # disputes feature is needed for zombie-net parachains malus test
    - time cargo build --release --verbose --bin tidechain
    - sccache -s
    # pack artifacts
    - mkdir -p ./artifacts
    - VERSION="${CI_COMMIT_REF_NAME}" # will be tag or branch name
    - mv ./target/release/tidechain ./artifacts/.
    - pushd artifacts
    - sha256sum tidechain | tee tidechain.sha256
    - shasum -c tidechain.sha256
    - popd
    - EXTRATAG="$(./artifacts/tidechain --version |
      sed -n -r 's/^tidechain ([0-9.]+.*-[0-9a-f]{7,13})-.*$/\1/p')"
    - EXTRATAG="${CI_COMMIT_REF_NAME}-${EXTRATAG}-$(cut -c 1-8 ./artifacts/tidechain.sha256)"
    - echo "Tidechain version = ${VERSION} (EXTRATAG = ${EXTRATAG})"
    - echo -n ${VERSION} > ./artifacts/VERSION
    - echo -n ${EXTRATAG} > ./artifacts/EXTRATAG
    - cp -r scripts/* ./artifacts

check-runtime-benchmarks:
  stage: test
  <<: *rules-test
  <<: *docker-env
  <<: *compiler-info
  <<: *vault-secrets
  script:
    # Check that the node will compile with `runtime-benchmarks` feature flag.
    - ./scripts/gitlab/check_runtime_benchmarks.sh
    - sccache -s

check-no-default-features:
  stage: test
  <<: *rules-test
  <<: *docker-env
  <<: *compiler-info
  <<: *vault-secrets
  script:
    # Check that tidechain-cli will compile no default features.
    - ./scripts/gitlab/check_no_default_features.sh
    - sccache -s

spellcheck:
  stage: test
  <<: *docker-env
  <<: *rules-test
  script:
    - cargo spellcheck --version
    # compare with the commit parent to the PR, given it's from a default branch
    - git fetch origin +${CI_DEFAULT_BRANCH}:${CI_DEFAULT_BRANCH}
    - echo "___Spellcheck is going to check your diff___"
    - cargo spellcheck list-files -vvv $(git diff --diff-filter=AM --name-only $(git merge-base ${CI_COMMIT_SHA} ${CI_DEFAULT_BRANCH} -- :^bridges))
    - time cargo spellcheck check -vvv --cfg=scripts/gitlab/spellcheck.toml --checkers hunspell --code 1
      $(git diff --diff-filter=AM --name-only $(git merge-base ${CI_COMMIT_SHA} ${CI_DEFAULT_BRANCH} -- :^bridges))
  allow_failure: true

check-transaction-versions:
  stage: build
  <<: *rules-test
  <<: *docker-env
  <<: *vault-secrets
  image: node:15
  needs:
    - job: test-build-linux-stable
      artifacts: true
  before_script:
    - apt-get -y update; apt-get -y install jq lsof
    - npm install --ignore-scripts -g @polkadot/metadata-cmp
    # Set git config
    - git config remote.origin.url "https://github.com/tide-labs/tidechain.git"
    - git fetch origin release
  script:
    - scripts/gitlab/check_extrinsics_ordering.sh

generate-impl-guide:
  stage: build
  <<: *rules-test
  <<: *docker-env
  image:
    name: michaelfbryan/mdbook-docker-image:v0.4.4
    entrypoint: [""]
  script:
    - mdbook build roadmap/implementers-guide

build-rustdoc:
  stage: build
  <<: *docker-env
  <<: *rules-test
  variables:
    SKIP_WASM_BUILD: 1
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}-doc"
    when: on_success
    expire_in: 7 days
    paths:
      - ./crate-docs/
  script:
    # FIXME: it fails with `RUSTDOCFLAGS="-Dwarnings"` and `--all-features`
    - time cargo doc --workspace --verbose
    - rm -f ./target/doc/.lock
    - mv ./target/doc ./crate-docs
    # FIXME: remove me after CI image gets nonroot
    - chown -R nonroot:nonroot ./crate-docs
    # Redirect to tidechain_service by default
    - echo "<meta http-equiv=refresh content=0;url=tidechain_service/index.html>" > ./crate-docs/index.html
    - sccache -s

.build-push-image: &build-push-image
  <<: *kubernetes-env
  <<: *vault-secrets
  image: quay.io/buildah/stable
  variables: &image-variables
    GIT_STRATEGY: none
    DOCKER_USER: ${SEMNETPR_USER}
    DOCKER_PASS: ${SEMNETPR_PASS}
  before_script: &check-versions
    - test -s ./artifacts/VERSION || exit 1
    - test -s ./artifacts/EXTRATAG || exit 1
    - VERSION="$(cat ./artifacts/VERSION)"
    - EXTRATAG="$(cat ./artifacts/EXTRATAG)"
    - echo "Tidechain version = ${VERSION} (EXTRATAG = ${EXTRATAG})"
  script:
    - test "$DOCKER_USER" -a "$DOCKER_PASS" ||
      ( echo "no docker credentials provided"; exit 1 )
    - cd ./artifacts
    - buildah bud
      --format=docker
      --build-arg VCS_REF="${CI_COMMIT_SHA}"
      --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      --build-arg IMAGE_NAME="${IMAGE_NAME}"
      --tag "$IMAGE_NAME:$VERSION"
      --tag "$IMAGE_NAME:$EXTRATAG"
      --file ${DOCKERFILE} .
    # The job will success only on the protected branch
    - echo "$DOCKER_PASS" |
      buildah login --username "$DOCKER_USER" --password-stdin docker.io
    - buildah info
    - buildah push --format=v2s2 "$IMAGE_NAME:$VERSION"
    - buildah push --format=v2s2 "$IMAGE_NAME:$EXTRATAG"
  after_script:
    - buildah logout --all

update_tidechain_weights: &update-weights
  stage: build
  when: manual
  variables:
    RUNTIME: tidechain
  artifacts:
    paths:
      - ${RUNTIME}_weights_${CI_COMMIT_SHORT_SHA}.patch
  script:
    - ./scripts/run_benches_for_runtime.sh $RUNTIME
    - git diff -P > ${RUNTIME}_weights_${CI_COMMIT_SHORT_SHA}.patch
  # uses the "shell" executors
  tags:
    - weights

update_hertel_weights:
  <<: *update-weights
  variables:
    RUNTIME: hertel

# stage: publish

publish-s3-release: &publish-s3
  stage: publish
  needs:
    - job: test-build-linux-stable
      artifacts: true
  <<: *kubernetes-env
  <<: *vault-secrets
  image: paritytech/awscli:latest
  variables:
    GIT_STRATEGY: none
    PREFIX: "builds/tidechain/${ARCH}-${DOCKER_OS}"
  rules:
    # publishing binaries nightly
    - if: $CI_PIPELINE_SOURCE == "schedule"
  before_script:
    - *check-versions
  script:
    - echo "uploading objects to https://releases.tidefi.io/${PREFIX}/${VERSION}"
    - aws s3 sync --acl public-read ./artifacts/ s3://${AWS_BUCKET}/${PREFIX}/${VERSION}/
    - echo "update objects at https://releases.tidefi.io/${PREFIX}/${EXTRATAG}"
    - find ./artifacts -type f | while read file; do
      name="${file#./artifacts/}";
      aws s3api copy-object
      --copy-source ${AWS_BUCKET}/${PREFIX}/${VERSION}/${name}
      --bucket ${AWS_BUCKET} --key ${PREFIX}/${EXTRATAG}/${name};
      done
    - |
      cat <<-EOM
      |
      |  tidechain binary paths:
      |
      |  - https://releases.tidefi.io/${PREFIX}/${EXTRATAG}/tidechain
      |  - https://releases.tidefi.io/${PREFIX}/${VERSION}/tidechain
      |
      EOM
  after_script:
    - aws s3 ls s3://${AWS_BUCKET}/${PREFIX}/${EXTRATAG}/
      --recursive --human-readable --summarize

publish-rustdoc:
  stage: publish
  <<: *kubernetes-env
  <<: *vault-secrets
  image: paritytech/tools:latest
  variables:
    GIT_DEPTH: 100
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME == "main"
    - if: $CI_COMMIT_REF_NAME == "main"
  # `needs:` can be removed after CI image gets nonroot. In this case `needs:` stops other
  # artifacts from being dowloaded by this job.
  needs:
    - job: build-rustdoc
      artifacts: true
  script:
    # setup ssh
    - eval $(ssh-agent)
    - ssh-add - <<< ${GITHUB_SSH_PRIV_KEY}
    - mkdir ~/.ssh && touch ~/.ssh/known_hosts
    - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    # Set git config
    - git config user.email "devops-team@semantic-network.com"
    - git config user.name "${GITHUB_USER}"
    - git config remote.origin.url "git@github.com:/semnet/${CI_PROJECT_NAME}.git"
    - git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
    - git fetch origin gh-pages
    # Save README and docs
    - cp -r ./crate-docs/ /tmp/doc/
    - cp README.md /tmp/doc/
    - git checkout gh-pages
    # Remove everything and restore generated docs and README
    - rm -rf ./*
    - mv /tmp/doc/* .
    # Upload files
    - git add --all --force
    # `git commit` has an exit code of > 0 if there is nothing to commit.
    # This causes GitLab to exit immediately and marks this job failed.
    # We don't want to mark the entire job failed if there's nothing to
    # publish though, hence the `|| true`.
    - git commit -m "Updated docs for ${CI_COMMIT_REF_NAME}" ||
      echo "___Nothing to commit___"
    - git push origin gh-pages --force
    - echo "___Rustdoc was successfully published to https://semnet.github.io/tidechain/___"
  after_script:
    - rm -rf .git/ ./*

deploy-semnet-devnet:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_REF_NAME == "dev"
  variables:
    TIDECHAIN_CI_COMMIT_NAME: "${CI_COMMIT_REF_NAME}"
    TIDECHAIN_CI_COMMIT_REF: "${CI_COMMIT_SHORT_SHA}"
  allow_failure: true
  trigger: "semnet/infrastructure/tidechain-devnet"
