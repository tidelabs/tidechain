# .gitlab-ci.yml
#
# tidechain
#
# pipelines can be triggered manually in the web
# setting DEPLOY_TAG will only deploy the tagged image
#
# please do not add new jobs without "rules:" and "*-env". There are &rules-test for everything
# and "docker-env" to set a runner which executes the job.

stages:
  - test
  - build
  - publish
  - deploy

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

variables:
  GIT_STRATEGY: fetch
  GIT_DEPTH: 100
  CI_SERVER_NAME: "GitLab CI"
  CI_IMAGE: "tidelabs/tidechain-ci:latest"
  DOCKER_OS: "debian:stretch"
  ARCH: "x86_64"

default:
  cache: {}

.collect-artifacts: &collect-artifacts
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when: on_success
    expire_in: 28 days
    paths:
      - ./artifacts/

.kubernetes-env: &kubernetes-env
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure
  interruptible: true
  tags:
    - dv-Kubernetes

.docker-env: &docker-env
  image: "${CI_IMAGE}"
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure
  interruptible: true
  tags:
    - howick-runner

.compiler-info: &compiler-info
  before_script:
    - rustup show
    - cargo --version
    - sccache -s

.rules-test: &rules-test # these jobs run always*
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_REF_NAME == "dev"
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/ # PRs (Github issues)
    - if: $CI_COMMIT_BRANCH =~ /^feat/ # Features
    - if: $CI_COMMIT_BRANCH =~ /^chore/ # Chore
    - if: $CI_COMMIT_BRANCH =~ /^fix/ # Fix

check-runtime:
  stage: test
  image: tidelabs/tools:latest
  #<<: *kubernetes-env
  <<: *docker-env
  <<: *rules-test
  script:
    - ./scripts/gitlab/check_runtime.sh
  allow_failure: true

cargo-fmt:
  stage: test
  <<: *docker-env
  <<: *rules-test
  script:
    - cargo +nightly --version
    - cargo +nightly fmt --all -- --check
  allow_failure: false

test-deterministic-wasm:
  stage: test
  <<: *rules-test
  <<: *docker-env
  <<: *compiler-info
  script:
    - ./scripts/gitlab/test_deterministic_wasm.sh

test-build-linux-stable:
  stage: test
  <<: *docker-env
  <<: *compiler-info
  <<: *collect-artifacts
  variables:
    RUST_TOOLCHAIN: stable
    # Enable debug assertions since we are running optimized builds for testing
    # but still want to have debug assertions.
    RUSTFLAGS: "-Cdebug-assertions=y -Dwarnings"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_REF_NAME == "dev"
    - if: $CI_COMMIT_REF_NAME =~ /^v[0-9]+\.[0-9]+.*$/ # i.e. v1.0, v2.1rc1
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/ # PRs
    - if: $CI_COMMIT_BRANCH =~ /^feat/ # Features
    - if: $CI_COMMIT_BRANCH =~ /^chore/ # Chore
    - if: $CI_COMMIT_BRANCH =~ /^fix/ # Fix
  script:
    # cargo-deb@1.41 require a non-stable flag
    - cargo install cargo-deb --version 1.40.5
    - ./scripts/gitlab/test_linux_stable.sh
    # we're using the bin built here, instead of having a parallel `build-linux-release`
    # disputes feature is needed for zombie-net parachains malus test
    - time cargo build --release --verbose --bin tidechain
    - time cargo deb --no-build
    - sccache -s
    # pack artifacts
    - mkdir -p ./artifacts
    - VERSION="${CI_COMMIT_REF_NAME}" # will be tag or branch name
    - mv ./target/release/tidechain ./artifacts/.
    - mv ./target/debian/tidechain_*_amd64.deb ./artifacts/tidechain.deb
    - pushd artifacts
    - sha256sum tidechain | tee tidechain.sha256
    - shasum -c tidechain.sha256
    - sha256sum tidechain.deb | tee tidechain.deb.sha256
    - shasum -c tidechain.deb.sha256
    - popd
    - EXTRATAG="$(./artifacts/tidechain --version |
      sed -n -r 's/^tidechain ([0-9.]+.*-[0-9a-f]{7,13})-.*$/\1/p')"
    - EXTRATAG="${CI_COMMIT_REF_NAME}-${EXTRATAG}-$(cut -c 1-8 ./artifacts/tidechain.sha256)"
    - echo "Tidechain version = ${VERSION} (EXTRATAG = ${EXTRATAG})"
    - echo -n ${VERSION} > ./artifacts/VERSION
    - echo -n ${EXTRATAG} > ./artifacts/EXTRATAG
    - cp -r scripts/* ./artifacts
  timeout: 2h

check-runtime-benchmarks:
  stage: test
  <<: *rules-test
  <<: *docker-env
  <<: *compiler-info
  script:
    # Check that the node will compile with `runtime-benchmarks` feature flag.
    - ./scripts/gitlab/check_runtime_benchmarks.sh
    - sccache -s

check-try-runtime:
  stage: test
  <<: *rules-test
  <<: *docker-env
  <<: *compiler-info
  script:
    # Check that the node will compile with `try-runtime` feature flag.
    - ./scripts/gitlab/check_try_runtime.sh
    - sccache -s

check-no-default-features:
  stage: test
  <<: *rules-test
  <<: *docker-env
  <<: *compiler-info
  script:
    # Check that tidechain-cli will compile no default features.
    - ./scripts/gitlab/check_no_default_features.sh
    - sccache -s

spellcheck:
  stage: test
  <<: *docker-env
  <<: *rules-test
  script:
    - cargo spellcheck --version
    # compare with the commit parent to the PR, given it's from a default branch
    - git fetch origin +${CI_DEFAULT_BRANCH}:${CI_DEFAULT_BRANCH}
    - echo "___Spellcheck is going to check your diff___"
    - cargo spellcheck list-files -vvv $(git diff --diff-filter=AM --name-only $(git merge-base ${CI_COMMIT_SHA} ${CI_DEFAULT_BRANCH}))
    - time cargo spellcheck check -vvv --cfg=scripts/gitlab/spellcheck.toml --checkers hunspell --code 1
      $(git diff --diff-filter=AM --name-only $(git merge-base ${CI_COMMIT_SHA} ${CI_DEFAULT_BRANCH}))
  allow_failure: true

check-transaction-versions:
  stage: build
  <<: *rules-test
  <<: *docker-env
  image: node:15
  needs:
    - job: test-build-linux-stable
      artifacts: true
  before_script:
    - apt-get -y update; apt-get -y install jq lsof
    - npm install --ignore-scripts -g @polkadot/metadata-cmp
    # Set git config
    - git config remote.origin.url "https://github.com/tidelabs/tidechain.git"
    - git fetch origin release
  script:
    - scripts/gitlab/check_extrinsics_ordering.sh
  # FIXME: Remove once repo is public
  allow_failure: true

build-rustdoc:
  stage: build
  <<: *docker-env
  <<: *rules-test
  variables:
    SKIP_WASM_BUILD: 1
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}-doc"
    when: on_success
    expire_in: 7 days
    paths:
      - ./crate-docs/
  script:
    # FIXME: it fails with `RUSTDOCFLAGS="-Dwarnings"` and `--all-features`
    - time cargo doc --workspace --verbose
    - rm -f ./target/doc/.lock
    - mv ./target/doc ./crate-docs
    # FIXME: remove me after CI image gets nonroot
    - chown -R nonroot:nonroot ./crate-docs
    # Redirect to tidechain_service by default
    - echo "<meta http-equiv=refresh content=0;url=tidechain_service/index.html>" > ./crate-docs/index.html
    - sccache -s

update_tidechain_weights: &update-weights
  stage: build
  # FIXME: Revert to dv-Weights
  <<: *docker-env
  when: manual
  variables:
    RUNTIME: tidechain
  artifacts:
    paths:
      - ${RUNTIME}_weights_${CI_COMMIT_SHORT_SHA}.patch
  script:
    - ./scripts/run_benches_for_runtime.sh $RUNTIME
    - git diff -P > ${RUNTIME}_weights_${CI_COMMIT_SHORT_SHA}.patch
  # FIXME: Revert to dv-Weights
  #tags:
  # - dv-Weights

update_lagoon_weights:
  <<: *update-weights
  variables:
    RUNTIME: lagoon

# stage: publish

publish-s3-release: &publish-s3
  stage: publish
  needs:
    - job: test-build-linux-stable
      artifacts: true
  #<<: *kubernetes-env
  <<: *docker-env
  image: tidelabs/awscli:latest
  variables:
    GIT_STRATEGY: none
    PREFIX: "builds/tidechain/${ARCH}-${DOCKER_OS}"
  rules:
    # publishing binaries nightly
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_REF_NAME == "dev"
    - if: $CI_COMMIT_REF_NAME =~ /^v[0-9]+\.[0-9]+.*$/ # i.e. v1.0, v2.1rc1
  before_script:
    - test -s ./artifacts/VERSION || exit 1
    - test -s ./artifacts/EXTRATAG || exit 1
    - VERSION="$(cat ./artifacts/VERSION)"
    - EXTRATAG="$(cat ./artifacts/EXTRATAG)"
    - echo "Tidechain version = ${VERSION} (EXTRATAG = ${EXTRATAG})"
  script:
    - echo "uploading objects to https://releases.tidefi.io/${PREFIX}/${VERSION}"
    - aws s3 sync --acl public-read ./artifacts/ s3://${AWS_BUCKET}/${PREFIX}/${VERSION}/
    - echo "update objects at https://releases.tidefi.io/${PREFIX}/${EXTRATAG}"
    - find ./artifacts -type f | while read file; do
      name="${file#./artifacts/}";
      aws s3api copy-object
      --copy-source ${AWS_BUCKET}/${PREFIX}/${VERSION}/${name}
      --bucket ${AWS_BUCKET} --key ${PREFIX}/${EXTRATAG}/${name};
      done
    - |
      cat <<-EOM
      |
      |  tidechain binary paths:
      |
      |  - https://releases.tidefi.io/${PREFIX}/${EXTRATAG}/tidechain
      |  - https://releases.tidefi.io/${PREFIX}/${VERSION}/tidechain
      |
      |  tidechain packages paths:
      |
      |  - https://releases.tidefi.io/${PREFIX}/${EXTRATAG}/tidechain.deb
      |  - https://releases.tidefi.io/${PREFIX}/${VERSION}/tidechain.deb
      |
      EOM
  after_script:
    - aws s3 ls s3://${AWS_BUCKET}/${PREFIX}/${EXTRATAG}/
      --recursive --human-readable --summarize

publish-rustdoc:
  stage: publish
  #<<: *kubernetes-env
  <<: *docker-env
  image: tidelabs/tools:latest
  variables:
    GIT_DEPTH: 100
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME == "dev"
    - if: $CI_COMMIT_REF_NAME == "dev"
  # `needs:` can be removed after CI image gets nonroot. In this case `needs:` stops other
  # artifacts from being dowloaded by this job.
  needs:
    - job: build-rustdoc
      artifacts: true
  script:
    # setup ssh
    - eval $(ssh-agent)
    - ssh-add - <<< ${GITHUB_SSH_PRIV_KEY}
    - mkdir ~/.ssh && touch ~/.ssh/known_hosts
    - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    # Clone gh-pages
    - git clone "git@github.com:/tidelabs/tidechain.git" gh-pages
    # Save README and docs
    - rm -rf /tmp/doc/
    - cp -r ./crate-docs/ /tmp/doc/
    - cp README.md /tmp/doc/
    # Checkout gh-pages
    - pushd gh-pages
    - git checkout gh-pages
    - git config user.email "tidechain.ci@gmail.com"
    - git config user.name "${GITHUB_USER}"
    # Remove everything and restore generated docs and README
    - rm -rf ./*
    - mv /tmp/doc/* .
    # Upload files
    - git add --all --force
    # `git commit` has an exit code of > 0 if there is nothing to commit.
    # This causes GitLab to exit immediately and marks this job failed.
    # We don't want to mark the entire job failed if there's nothing to
    # publish though, hence the `|| true`.
    - git commit -m "Updated docs for ${CI_COMMIT_REF_NAME}" ||
      echo "___Nothing to commit___"
    - git push origin gh-pages --force
    - echo "___Rustdoc was successfully published to https://tidelabs.github.io/tidechain/___"
  after_script:
    - rm -rf ./gh-pages
    - rm -rf /tmp/doc/

.build-push-image: &build-push-image
  <<: *docker-env
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  variables: &image-variables
    DOCKER_USER: ${DOCKERPR_USER}
    DOCKER_PASS: ${DOCKERPR_PASS}
  before_script:
    - test -s ./artifacts/VERSION || exit 1
    - VERSION="$(cat ./artifacts/VERSION)"
    - echo "Tidechain version = ${VERSION}"
  script:
    - test "$DOCKER_USER" -a "$DOCKER_PASS" ||
      ( echo "no docker credentials provided"; exit 1 )
    - echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"username\":\"$DOCKER_USER\",\"password\":\"$DOCKER_PASS\"}}}" > /kaniko/.docker/config.json
    - cd ./artifacts
    # The job will succeed only on the protected branch
    - /kaniko/executor
      --context .
      --dockerfile ${DOCKERFILE}
      --build-arg VCS_REF="${CI_COMMIT_SHA}"
      --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      --build-arg IMAGE_NAME="${IMAGE_NAME}"
      --destination "$IMAGE_NAME:$CI_COMMIT_SHORT_SHA"
  after_script:
    - rm -Rf /kaniko/.docker/config.json

publish-tidechain-image:
  stage: build
  <<: *build-push-image
  variables:
    <<: *image-variables
    # scripts/dockerfiles/tidechain_injected_debug.Dockerfile
    DOCKERFILE: dockerfiles/tidechain_injected_debug.Dockerfile
    IMAGE_NAME: docker.io/tidelabs/lagoon-devnet
  rules:
    # Don't run on releases - this is handled by the Github Action here:
    # .github/workflows/publish-docker-release.yml
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^v[0-9]+\.[0-9]+.*$/ # i.e. v1.0, v2.1rc1
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_REF_NAME == "dev"
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/ # PRs
    - if: $CI_COMMIT_BRANCH =~ /^feat/ # Features
    - if: $CI_COMMIT_BRANCH =~ /^chore/ # Chore
  needs:
    - job: test-build-linux-stable
      artifacts: true
  after_script:
    # pass artifacts to the zombienet-tests job
    # https://docs.gitlab.com/ee/ci/multi_project_pipelines.html#with-variable-inheritance
    - echo "TIDECHAIN_IMAGE_NAME=${IMAGE_NAME}" > ./artifacts/tidechain.env
    - echo "TIDECHAIN_IMAGE_TAG=$(cat ./artifacts/EXTRATAG)" >> ./artifacts/tidechain.env
  artifacts:
    reports:
      # this artifact is used in zombienet-tests job
      dotenv: ./artifacts/tidechain.env

deploy-semnet-devnet:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_REF_NAME == "dev"
  needs:
    - job: publish-tidechain-image
  variables:
    TIDECHAIN_CI_COMMIT_NAME: "${CI_COMMIT_REF_NAME}"
    TIDECHAIN_CI_COMMIT_REF: "${CI_COMMIT_SHORT_SHA}"
  allow_failure: true
  trigger: "semnet/tidefi/substrate/infrastructure-lagoon-devnet"
