window.SIDEBAR_ITEMS = {"enum":[["Call","Contains one variant per dispatchable that can be called by an extrinsic."],["ConfigOp","Possible operations on the configuration values of this pallet."],["Error","Custom dispatch errors of this pallet."],["Event","The event emitted by this pallet."],["Forcing","Mode of era-forcing."],["RewardDestination","A destination account for payment."],["StakerStatus","Indicates the initial status of the staker."]],"macro":[["log",""]],"mod":[["inflation","This module expose one function `P_NPoS` (Payout NPoS) or `compute_total_payout` which returns the total payout for the era given the era duration and the staking rate in NPoS. The staking rate in NPoS is the total amount of tokens staked by nominators and validators, divided by the total token supply."],["migrations","Storage migrations for the Staking pallet."],["slashing","A slashing implementation for NPoS systems."],["weights","Autogenerated weights for pallet_staking"]],"struct":[["ActiveEraInfo","Information regarding the active era (era in used in session)."],["ConvertCurve","Adaptor to turn a `PiecewiseLinear` curve definition into an `EraPayout` impl, used for backwards compatibility."],["EraRewardPoints","Reward points of an era. Used to split era total payout between validators."],["Exposure","A snapshot of the stake backing a single validator in the system."],["ExposureOf","A typed conversion from stash account ID to the active exposure of nominators on that account."],["FilterHistoricalOffences","Filter historical offences out and only allow those from the bonding period."],["GenesisConfig","Can be used to configure the genesis state of this pallet."],["IndividualExposure","The amount of exposure (to slashing) than an individual nominator has."],["Nominations","A record of the nominations made by a specific account."],["Pallet","The pallet implementing the on-chain logic."],["StakingLedger","The ledger of a (bonded) stash."],["StashOf","A `Convert` implementation that finds the stash of the given controller account, if any."],["TestBenchmarkingConfig","A mock benchmarking config for pallet-staking."],["UnappliedSlash","A pending slash record. The value of the slash has been computed but not applied yet, rather deferred for several eras."],["UnlockChunk","Just a Balance/BlockNumber tuple to encode when a chunk of funds will be unlocked."],["UseNominatorsAndValidatorsMap","A simple voter list implementation that does not require any additional pallets. Note, this does not provided nominators in sorted ordered. If you desire nominators in a sorted order take a look at [`pallet-bags-list]."],["UseValidatorsMap","A simple sorted list implementation that does not require any additional pallets. Note, this does not provide validators in sorted order. If you desire nominators in a sorted order take a look at [`pallet-bags-list`]."],["ValidatorPrefs","Preference of what happens regarding validation."]],"trait":[["BenchmarkingConfig","Configurations of the benchmarking of the pallet."],["Config","Configuration trait of this pallet."],["EraPayout","Handler for determining how much of a balance should be paid out on the current era."],["SessionInterface","Means for interacting with a specialized version of the `session` trait."]],"type":[["ActiveEra","The active era information, it holds index and start."],["BalanceOf","The balance type of this pallet."],["Bonded","Map from all locked “stash” accounts to the controller account."],["CanceledSlashPayout","The amount of currency given to reporters of a slash event which was canceled by extraordinary circumstances (e.g. governance)."],["CurrentEra","The current era index."],["CurrentPlannedSession","The last planned session scheduled by the session pallet."],["ErasRewardPoints","Rewards for the last `HISTORY_DEPTH` eras. If reward hasn’t been set or has been removed then 0 reward is returned."],["ErasStakers","Exposure of validator at era."],["ErasStakersClipped","Clipped Exposure of validator at era."],["ErasStartSessionIndex","The session index at which the era start for the last `HISTORY_DEPTH` eras."],["ErasTotalStake","The total amount staked for the last `HISTORY_DEPTH` eras. If total hasn’t been set or has been removed then 0 stake is returned."],["ErasValidatorPrefs","Similar to `ErasStakers`, this holds the preferences of validators."],["ErasValidatorReward","The total validator era payout for the last `HISTORY_DEPTH` eras."],["ForceEra","Mode of era forcing."],["Invulnerables","Any validators that may never be slashed or forcibly kicked. It’s a Vec since they’re easy to initialize and the performance hit is minimal (we expect no more than four invulnerables) and restricted to testnets."],["Ledger","Map from all (unlocked) “controller” accounts to the info regarding the staking."],["MaxNominatorsCount","The maximum nominator count before we stop allowing new validators to join."],["MaxValidatorsCount","The maximum validator count before we stop allowing new validators to join."],["MaxWinnersOf","Maximum number of winners (aka. active validators), as defined in the election provider of this pallet."],["MinCommission","The minimum amount of commission that validators can set."],["MinNominatorBond","The minimum active bond to become and maintain the role of a nominator."],["MinValidatorBond","The minimum active bond to become and maintain the role of a validator."],["MinimumActiveStake","The minimum active nominator stake of the last successful election."],["MinimumValidatorCount","Minimum number of staking participants before emergency conditions are imposed."],["Module","Type alias to `Pallet`, to be used by `construct_runtime`."],["Nominators","The map from nominator stash key to their nomination preferences, namely the validators that they wish to support."],["OffendingValidators","Indices of validators that have offended in the active era and whether they are currently disabled."],["Payee","Where the reward payment should be made. Keyed by stash."],["RewardPoint","Counter for the number of “reward” points earned by a given validator."],["SlashRewardFraction","The percentage of the slash that is distributed to reporters."],["SlashingSpans","Slashing spans for stash accounts."],["UnappliedSlashes","All unapplied slashes that are queued for later."],["ValidatorCount","The ideal number of active validators."],["Validators","The map from (wannabe) validator stash key to the preferences of that validator."]]};